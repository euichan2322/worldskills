AWSTemplateFormatVersion: 2010-09-09

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
      - Key: Name
        Value:  !Join ['', [!Ref "AWS::StackName", "-VPC" ]]

  InternetGateway:
    DependsOn: VPC
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Join ['', [!Ref "AWS::StackName", "-IGW" ]]

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-2a
      CidrBlock: 10.0.0.0/24
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join ['', [!Ref "AWS::StackName", "-Public-a"]]

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-2b
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join ['', [!Ref "AWS::StackName", "-Public-b"]]

  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-2c
      CidrBlock: 10.0.2.0/24
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join ['', [!Ref "AWS::StackName", "-Public-c"]]

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join ['', [!Ref "AWS::StackName", "-Public-rt"]]
  
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetC
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: ap-northeast-2a
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-a

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: ap-northeast-2b
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-b

  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.5.0/24
      AvailabilityZone: ap-northeast-2c
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-c

  NATGateway1:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt EIP1.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags: 
      - Key: Name
        Value: !Sub NAT-${AWS::StackName}
  EIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC

  NATGateway2:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt EIP2.AllocationId
      SubnetId: !Ref PublicSubnetB
      Tags: 
      - Key: Name
        Value: !Sub NAT-${AWS::StackName}
  EIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC

  NATGateway3:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt EIP3.AllocationId
      SubnetId: !Ref PublicSubnetC
      Tags: 
      - Key: Name
        Value: !Sub NAT-${AWS::StackName}
  EIP3:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC

  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join ['', [!Ref "AWS::StackName", "-Private-rt-a"]]
  
  PrivateRouteA:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref NATGateway1
      RouteTableId: !Ref PrivateRouteTableA

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTableA

  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join ['', [!Ref "AWS::StackName", "-Private-rt-b"]]
  
  PrivateRouteB:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref NATGateway2
      RouteTableId: !Ref PrivateRouteTableB

  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTableB

  PrivateRouteTableC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join ['', [!Ref "AWS::StackName", "-Private-rt-c"]]
  
  PrivateRouteC:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref NATGateway3
      RouteTableId: !Ref PrivateRouteTableC

  PrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetC
      RouteTableId: !Ref PrivateRouteTableC